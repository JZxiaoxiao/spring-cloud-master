server:
  port: 8553

#这种 模式和自定义过滤器 有区别，这是走的过滤器工厂模式
spring:
  profiles:
    active: elapse_route #spring的启动文件为elapse_route文件

#在application.yml再建一个配置文件，语法是三个横线

##当请求的时间在这个配置的时间之后，请求会被路由到http://springboot.fun/
#请求header 添加："X-Request-Foo": "Bar"
---
spring:
  cloud:
    gateway:
      routes:
        - id: add_request_header_route #每个router都需要一个唯一的id
          uri: http://httpbin.org:80/get
          filters:
            - AddRequestHeader=X-Request-Foo, Bar
            #AddRequestHeaderGatewayFilterFactory(约定写成AddRequestHeader)
            #如果是自定义的过滤器工厂，比如MyTestGatewayFilterFactory（这里应该填 MyTest）
          predicates:
            - After=2018-01-20T17:42:47.789-07:00[America/Denver]
  profiles: add_request_header_route

#所有的/foo/**开始的路径都会命中配置的router，并执行过滤器的逻辑，此工厂将/foo/(?.*)重写为{segment}，然后转发到https://blog.csdn.net
---
spring:
  cloud:
    gateway:
      routes:
        - id: rewritepath_route
          uri: https://blog.csdn.net
          predicates:
            - Path=/foo/**
          filters:
            - RewritePath=/foo/(?<segment>.*), /$\{segment}
  profiles: rewritepath_route

##Spring Cloud Gateway内置了19种强大的过滤器工厂，也可以 自定义过滤器需要实现GatewayFilter和Ordered2个接口


#自定义过滤器工厂，指定 RequestTimeGatewayFilterFactory（语法约定写成RequestTime）
---
spring:
  cloud:
    gateway:
      routes:
        - id: elapse_route
          uri: http://httpbin.org:80/get
          filters:
            - RequestTime=true
          predicates:
            - After=2017-01-20T17:42:47.789-07:00[America/Denver]
  profiles: elapse_route